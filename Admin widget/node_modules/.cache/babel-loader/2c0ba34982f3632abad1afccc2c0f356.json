{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n\nimport * as React from 'react';\nimport { noTextChildNodes, possibleStandardNames, randomString, styleToObject } from './helpers';\n\nfunction parseAttributes(node, reactKey) {\n  var attributes = {\n    key: reactKey\n  };\n  /* istanbul ignore else */\n\n  if (node instanceof Element) {\n    var nodeClassNames = node.getAttribute('class');\n\n    if (nodeClassNames) {\n      attributes.className = nodeClassNames;\n    }\n\n    __spreadArray([], __read(node.attributes), false).forEach(function (d) {\n      switch (d.name) {\n        // this is manually handled above, so break;\n        case 'class':\n          break;\n\n        case 'style':\n          attributes[d.name] = styleToObject(d.value);\n          break;\n\n        case 'allowfullscreen':\n        case 'allowpaymentrequest':\n        case 'async':\n        case 'autofocus':\n        case 'autoplay':\n        case 'checked':\n        case 'controls':\n        case 'default':\n        case 'defer':\n        case 'disabled':\n        case 'formnovalidate':\n        case 'hidden':\n        case 'ismap':\n        case 'itemscope':\n        case 'loop':\n        case 'multiple':\n        case 'muted':\n        case 'nomodule':\n        case 'novalidate':\n        case 'open':\n        case 'readonly':\n        case 'required':\n        case 'reversed':\n        case 'selected':\n        case 'typemustmatch':\n          attributes[possibleStandardNames[d.name] || d.name] = true;\n          break;\n\n        default:\n          attributes[possibleStandardNames[d.name] || d.name] = d.value;\n      }\n    });\n  }\n\n  return attributes;\n}\n\nfunction parseChildren(childNodeList, level, options) {\n  var children = __spreadArray([], __read(childNodeList), false).map(function (node, index) {\n    return convertFromNode(node, __assign(__assign({}, options), {\n      index: index,\n      level: level + 1\n    }));\n  }).filter(Boolean);\n\n  if (!children.length) {\n    return null;\n  }\n\n  return children;\n}\n\nfunction parseName(nodeName) {\n  if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n    return nodeName;\n  }\n\n  return nodeName.toLowerCase();\n}\n\nexport function convertFromNode(input, options) {\n  var _a;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || !(input instanceof Node)) {\n    return null;\n  }\n\n  var _b = options.actions,\n      actions = _b === void 0 ? [] : _b,\n      _c = options.index,\n      index = _c === void 0 ? 0 : _c,\n      _d = options.level,\n      level = _d === void 0 ? 0 : _d,\n      randomKey = options.randomKey;\n  var node = input;\n  var key = \"\".concat(level, \"-\").concat(index);\n  var result = [];\n\n  if (randomKey && level === 0) {\n    key = \"\".concat(randomString(), \"-\").concat(key);\n  }\n  /* istanbul ignore else */\n\n\n  if (Array.isArray(actions)) {\n    actions.forEach(function (action) {\n      if (action.condition(node, key, level)) {\n        if (typeof action.pre === 'function') {\n          node = action.pre(node, key, level);\n\n          if (!(node instanceof Node)) {\n            node = input;\n            /* istanbul ignore else */\n\n            if (process.env.NODE_ENV !== 'production') {\n              // eslint-disable-next-line no-console\n              console.warn('The `pre` method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `post` method instead)');\n            }\n          }\n        }\n\n        if (typeof action.post === 'function') {\n          result.push(action.post(node, key, level));\n        }\n      }\n    });\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  switch (node.nodeType) {\n    case 1:\n      {\n        // regular dom-node\n        return React.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));\n      }\n\n    case 3:\n      {\n        // textnode\n        var nodeText = ((_a = node.nodeValue) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n        /* istanbul ignore else */\n\n        if (/^\\s+$/.test(nodeText) && !/[\\u00A0\\u202F]/.test(nodeText)) {\n          return null;\n        }\n        /* istanbul ignore next */\n\n\n        if (!node.parentNode) {\n          return nodeText;\n        }\n\n        var parentNodeName = node.parentNode.nodeName.toLowerCase();\n\n        if (noTextChildNodes.includes(parentNodeName)) {\n          /* istanbul ignore else */\n          if (/\\S/.test(nodeText)) {\n            // eslint-disable-next-line no-console\n            console.warn(\"A textNode is not allowed inside '\".concat(parentNodeName, \"'. Your text \\\"\").concat(nodeText, \"\\\" will be ignored\"));\n          }\n\n          return null;\n        }\n\n        return nodeText;\n      }\n\n    case 8:\n      {\n        // html-comment\n        return null;\n      }\n\n    /* istanbul ignore next */\n\n    default:\n      {\n        return null;\n      }\n  }\n}\nexport function convertFromString(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!input || typeof input !== 'string') {\n    return null;\n  }\n\n  var _a = options.nodeOnly,\n      nodeOnly = _a === void 0 ? false : _a,\n      _b = options.selector,\n      selector = _b === void 0 ? 'body > *' : _b,\n      _c = options.type,\n      type = _c === void 0 ? 'text/html' : _c;\n\n  try {\n    var parser = new DOMParser();\n    var document_1 = parser.parseFromString(input, type);\n    var node = document_1.querySelector(selector);\n\n    if (!(node instanceof Node)) {\n      throw new TypeError('Error parsing input');\n    }\n\n    if (nodeOnly) {\n      return node;\n    }\n\n    return convertFromNode(node, options);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n\n  return null;\n}\nexport default function convert(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof input === 'string') {\n    return convertFromString(input, options);\n  }\n\n  if (input instanceof Node) {\n    return convertFromNode(input, options);\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"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","names":["React","noTextChildNodes","possibleStandardNames","randomString","styleToObject","parseAttributes","node","reactKey","attributes","key","Element","nodeClassNames","getAttribute","className","__spreadArray","forEach","d","name","value","parseChildren","childNodeList","level","options","children","map","index","__assign","filter","Boolean","length","parseName","nodeName","test","toLowerCase","convertFromNode","input","Node","_b","_c","_d","randomKey","concat","result","Array","isArray","actions","action","condition","pre","process","env","NODE_ENV","console","warn","post","push","nodeType","createElement","childNodes","nodeText","nodeValue","_a","toString","parentNode","parentNodeName","includes","convertFromString","selector","type","parser","DOMParser","document_1","parseFromString","querySelector","TypeError","nodeOnly","error","convert"],"sources":["C:\\laragon\\www\\monday\\quickstart-react\\node_modules\\react-from-dom\\src\\index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport * as React from 'react';\n\nimport { noTextChildNodes, possibleStandardNames, randomString, styleToObject } from './helpers';\n\nexport interface Options {\n  actions?: Action[];\n  index?: number;\n  level?: number;\n  nodeOnly?: boolean;\n  randomKey?: boolean;\n  selector?: string;\n  type?: string;\n}\n\ninterface Attributes {\n  [index: string]: any;\n\n  key: string;\n}\n\nexport interface Action {\n  // If this returns true, the two following functions are called if they are defined\n  condition: (node: Node, key: string, level: number) => boolean;\n\n  // Use this to inject a component or remove the node\n  // It must return something that can be rendered by React\n  post?: (node: Node, key: string, level: number) => React.ReactNode;\n\n  // Use this to update or replace the node\n  // e.g. for removing or adding attributes, changing the node type\n  pre?: (node: Node, key: string, level: number) => Node;\n}\n\nfunction parseAttributes(node: Node, reactKey: string): Attributes {\n  const attributes: Attributes = {\n    key: reactKey,\n  };\n\n  /* istanbul ignore else */\n  if (node instanceof Element) {\n    const nodeClassNames = node.getAttribute('class');\n\n    if (nodeClassNames) {\n      attributes.className = nodeClassNames;\n    }\n\n    [...node.attributes].forEach(d => {\n      switch (d.name) {\n        // this is manually handled above, so break;\n        case 'class':\n          break;\n        case 'style':\n          attributes[d.name] = styleToObject(d.value);\n          break;\n        case 'allowfullscreen':\n        case 'allowpaymentrequest':\n        case 'async':\n        case 'autofocus':\n        case 'autoplay':\n        case 'checked':\n        case 'controls':\n        case 'default':\n        case 'defer':\n        case 'disabled':\n        case 'formnovalidate':\n        case 'hidden':\n        case 'ismap':\n        case 'itemscope':\n        case 'loop':\n        case 'multiple':\n        case 'muted':\n        case 'nomodule':\n        case 'novalidate':\n        case 'open':\n        case 'readonly':\n        case 'required':\n        case 'reversed':\n        case 'selected':\n        case 'typemustmatch':\n          attributes[possibleStandardNames[d.name] || d.name] = true;\n          break;\n        default:\n          attributes[possibleStandardNames[d.name] || d.name] = d.value;\n      }\n    });\n  }\n\n  return attributes;\n}\n\nfunction parseChildren(childNodeList: NodeList, level: number, options: Options) {\n  const children: React.ReactNode[] = [...childNodeList]\n    .map((node, index) =>\n      convertFromNode(node, {\n        ...options,\n        index,\n        level: level + 1,\n      }),\n    )\n    .filter(Boolean);\n\n  if (!children.length) {\n    return null;\n  }\n\n  return children;\n}\n\nfunction parseName(nodeName: string) {\n  if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n    return nodeName;\n  }\n\n  return nodeName.toLowerCase();\n}\n\nexport function convertFromNode(input: Node, options: Options = {}): React.ReactNode {\n  if (!input || !(input instanceof Node)) {\n    return null;\n  }\n\n  const { actions = [], index = 0, level = 0, randomKey } = options;\n\n  let node = input;\n  let key = `${level}-${index}`;\n  const result: React.ReactNode[] = [];\n\n  if (randomKey && level === 0) {\n    key = `${randomString()}-${key}`;\n  }\n\n  /* istanbul ignore else */\n  if (Array.isArray(actions)) {\n    actions.forEach((action: Action) => {\n      if (action.condition(node, key, level)) {\n        if (typeof action.pre === 'function') {\n          node = action.pre(node, key, level);\n\n          if (!(node instanceof Node)) {\n            node = input;\n\n            /* istanbul ignore else */\n            if (process.env.NODE_ENV !== 'production') {\n              // eslint-disable-next-line no-console\n              console.warn(\n                'The `pre` method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `post` method instead)',\n              );\n            }\n          }\n        }\n\n        if (typeof action.post === 'function') {\n          result.push(action.post(node, key, level));\n        }\n      }\n    });\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  switch (node.nodeType) {\n    case 1: {\n      // regular dom-node\n      return React.createElement(\n        parseName(node.nodeName),\n        parseAttributes(node, key),\n        parseChildren(node.childNodes, level, options),\n      );\n    }\n    case 3: {\n      // textnode\n      const nodeText = node.nodeValue?.toString() || '';\n\n      /* istanbul ignore else */\n      if (/^\\s+$/.test(nodeText) && !/[\\u00A0\\u202F]/.test(nodeText)) {\n        return null;\n      }\n\n      /* istanbul ignore next */\n      if (!node.parentNode) {\n        return nodeText;\n      }\n\n      const parentNodeName = node.parentNode.nodeName.toLowerCase();\n\n      if (noTextChildNodes.includes(parentNodeName)) {\n        /* istanbul ignore else */\n        if (/\\S/.test(nodeText)) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `A textNode is not allowed inside '${parentNodeName}'. Your text \"${nodeText}\" will be ignored`,\n          );\n        }\n\n        return null;\n      }\n\n      return nodeText;\n    }\n    case 8: {\n      // html-comment\n      return null;\n    }\n    /* istanbul ignore next */\n    default: {\n      return null;\n    }\n  }\n}\n\nexport function convertFromString(input: string, options: Options = {}): React.ReactNode | Node {\n  if (!input || typeof input !== 'string') {\n    return null;\n  }\n\n  const { nodeOnly = false, selector = 'body > *', type = 'text/html' } = options;\n\n  try {\n    const parser = new DOMParser();\n    const document = parser.parseFromString(input, type as DOMParserSupportedType);\n    const node = document.querySelector(selector);\n\n    if (!(node instanceof Node)) {\n      throw new TypeError('Error parsing input');\n    }\n\n    if (nodeOnly) {\n      return node;\n    }\n\n    return convertFromNode(node, options);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n\n  return null;\n}\n\nexport default function convert(\n  input: Node | string,\n  options: Options = {},\n): React.ReactNode | Node {\n  if (typeof input === 'string') {\n    return convertFromString(input, options);\n  }\n\n  if (input instanceof Node) {\n    return convertFromNode(input, options);\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}