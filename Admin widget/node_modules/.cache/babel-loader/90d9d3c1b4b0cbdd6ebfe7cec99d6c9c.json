{"ast":null,"code":"const {\n  MONDAY_API_URL,\n  MONDAY_OAUTH_TOKEN_URL\n} = require(\"./../constants.js\");\n\nconst fetch = require(\"./fetch\");\n\nconst COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nconst TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\nconst API_TIMEOUT_ERROR = \"Received timeout from monday.com's GraphQL API\";\n\nfunction apiRequest(url, data, token) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nasync function execute(data, token) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!token && options.url !== MONDAY_OAUTH_TOKEN_URL) throw new Error(TOKEN_IS_REQUIRED_ERROR);\n  const url = options.url || MONDAY_API_URL;\n  const path = options.path || \"\";\n  const fullUrl = `${url}${path}`;\n  let response = await apiRequest(fullUrl, data, token, options);\n  const responseStatusCode = response.status;\n  const responseContentType = response.headers.get(\"content-type\");\n\n  if (!responseContentType || !responseContentType.includes(\"application/json\")) {\n    if (responseStatusCode === 504) {\n      throw new Error(API_TIMEOUT_ERROR);\n    }\n\n    const responseText = await response.text();\n    throw new Error(responseText);\n  }\n\n  try {\n    return await response.json();\n  } catch (err) {\n    throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n  }\n}\n\nmodule.exports = {\n  execute,\n  COULD_NOT_PARSE_JSON_RESPONSE_ERROR,\n  TOKEN_IS_REQUIRED_ERROR,\n  API_TIMEOUT_ERROR\n};","map":{"version":3,"names":["MONDAY_API_URL","MONDAY_OAUTH_TOKEN_URL","require","fetch","COULD_NOT_PARSE_JSON_RESPONSE_ERROR","TOKEN_IS_REQUIRED_ERROR","API_TIMEOUT_ERROR","apiRequest","url","data","token","options","nodeFetch","method","body","JSON","stringify","headers","Authorization","execute","Error","path","fullUrl","response","responseStatusCode","status","responseContentType","get","includes","responseText","text","json","err","module","exports"],"sources":["C:/laragon/www/monday/quickstart-react/node_modules/monday-sdk-js/src/monday-api-client/monday-api-client.js"],"sourcesContent":["const { MONDAY_API_URL, MONDAY_OAUTH_TOKEN_URL } = require(\"./../constants.js\");\nconst fetch = require(\"./fetch\");\n\nconst COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nconst TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\nconst API_TIMEOUT_ERROR = \"Received timeout from monday.com's GraphQL API\";\n\nfunction apiRequest(url, data, token, options = {}) {\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nasync function execute(data, token, options = {}) {\n  if (!token && options.url !== MONDAY_OAUTH_TOKEN_URL) throw new Error(TOKEN_IS_REQUIRED_ERROR);\n\n  const url = options.url || MONDAY_API_URL;\n  const path = options.path || \"\";\n  const fullUrl = `${url}${path}`;\n  let response = await apiRequest(fullUrl, data, token, options);\n\n  const responseStatusCode = response.status;\n  const responseContentType = response.headers.get(\"content-type\");\n  if (!responseContentType || !responseContentType.includes(\"application/json\")) {\n    if (responseStatusCode === 504) {\n      throw new Error(API_TIMEOUT_ERROR);\n    }\n\n    const responseText = await response.text();\n    throw new Error(responseText);\n  }\n\n  try {\n    return await response.json();\n  } catch (err) {\n    throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n  }\n}\n\nmodule.exports = { execute, COULD_NOT_PARSE_JSON_RESPONSE_ERROR, TOKEN_IS_REQUIRED_ERROR, API_TIMEOUT_ERROR };\n"],"mappings":"AAAA,MAAM;EAAEA,cAAF;EAAkBC;AAAlB,IAA6CC,OAAO,CAAC,mBAAD,CAA1D;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,mCAAmC,GAAG,6DAA5C;AACA,MAAMC,uBAAuB,GAAG,mBAAhC;AACA,MAAMC,iBAAiB,GAAG,gDAA1B;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAoD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAClD,OAAOR,KAAK,CAACS,SAAN,CAAgBJ,GAAhB,EAAqB;IAC1BK,MAAM,EAAEF,OAAO,CAACE,MAAR,IAAkB,MADA;IAE1BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAI,IAAI,EAAvB,CAFoB;IAG1BQ,OAAO,EAAE;MACPC,aAAa,EAAER,KADR;MAEP,gBAAgB;IAFT;EAHiB,CAArB,CAAP;AAQD;;AAED,eAAeS,OAAf,CAAuBV,IAAvB,EAA6BC,KAA7B,EAAkD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAChD,IAAI,CAACD,KAAD,IAAUC,OAAO,CAACH,GAAR,KAAgBP,sBAA9B,EAAsD,MAAM,IAAImB,KAAJ,CAAUf,uBAAV,CAAN;EAEtD,MAAMG,GAAG,GAAGG,OAAO,CAACH,GAAR,IAAeR,cAA3B;EACA,MAAMqB,IAAI,GAAGV,OAAO,CAACU,IAAR,IAAgB,EAA7B;EACA,MAAMC,OAAO,GAAI,GAAEd,GAAI,GAAEa,IAAK,EAA9B;EACA,IAAIE,QAAQ,GAAG,MAAMhB,UAAU,CAACe,OAAD,EAAUb,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,CAA/B;EAEA,MAAMa,kBAAkB,GAAGD,QAAQ,CAACE,MAApC;EACA,MAAMC,mBAAmB,GAAGH,QAAQ,CAACN,OAAT,CAAiBU,GAAjB,CAAqB,cAArB,CAA5B;;EACA,IAAI,CAACD,mBAAD,IAAwB,CAACA,mBAAmB,CAACE,QAApB,CAA6B,kBAA7B,CAA7B,EAA+E;IAC7E,IAAIJ,kBAAkB,KAAK,GAA3B,EAAgC;MAC9B,MAAM,IAAIJ,KAAJ,CAAUd,iBAAV,CAAN;IACD;;IAED,MAAMuB,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAA3B;IACA,MAAM,IAAIV,KAAJ,CAAUS,YAAV,CAAN;EACD;;EAED,IAAI;IACF,OAAO,MAAMN,QAAQ,CAACQ,IAAT,EAAb;EACD,CAFD,CAEE,OAAOC,GAAP,EAAY;IACZ,MAAM,IAAIZ,KAAJ,CAAUhB,mCAAV,CAAN;EACD;AACF;;AAED6B,MAAM,CAACC,OAAP,GAAiB;EAAEf,OAAF;EAAWf,mCAAX;EAAgDC,uBAAhD;EAAyEC;AAAzE,CAAjB"},"metadata":{},"sourceType":"script"}