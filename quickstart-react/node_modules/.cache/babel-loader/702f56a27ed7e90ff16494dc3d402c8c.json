{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/laragon/www/monday/quickstart-react/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/laragon/www/monday/quickstart-react/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require(\"./../constants.js\"),\n    MONDAY_API_URL = _require.MONDAY_API_URL,\n    MONDAY_OAUTH_TOKEN_URL = _require.MONDAY_OAUTH_TOKEN_URL;\n\nvar fetch = require(\"./fetch\");\n\nvar COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nvar TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\nvar API_TIMEOUT_ERROR = \"Received timeout from monday.com's GraphQL API\";\n\nfunction apiRequest(url, data, token) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction execute(_x, _x2) {\n  return _execute.apply(this, arguments);\n}\n\nfunction _execute() {\n  _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data, token) {\n    var options,\n        url,\n        path,\n        fullUrl,\n        response,\n        responseStatusCode,\n        responseContentType,\n        responseText,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n            if (!(!token && options.url !== MONDAY_OAUTH_TOKEN_URL)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(TOKEN_IS_REQUIRED_ERROR);\n\n          case 3:\n            url = options.url || MONDAY_API_URL;\n            path = options.path || \"\";\n            fullUrl = \"\".concat(url).concat(path);\n            _context.next = 8;\n            return apiRequest(fullUrl, data, token, options);\n\n          case 8:\n            response = _context.sent;\n            responseStatusCode = response.status;\n            responseContentType = response.headers.get(\"content-type\");\n\n            if (!(!responseContentType || !responseContentType.includes(\"application/json\"))) {\n              _context.next = 18;\n              break;\n            }\n\n            if (!(responseStatusCode === 504)) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new Error(API_TIMEOUT_ERROR);\n\n          case 14:\n            _context.next = 16;\n            return response.text();\n\n          case 16:\n            responseText = _context.sent;\n            throw new Error(responseText);\n\n          case 18:\n            _context.prev = 18;\n            _context.next = 21;\n            return response.json();\n\n          case 21:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](18);\n            throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[18, 24]]);\n  }));\n  return _execute.apply(this, arguments);\n}\n\nmodule.exports = {\n  execute: execute,\n  COULD_NOT_PARSE_JSON_RESPONSE_ERROR: COULD_NOT_PARSE_JSON_RESPONSE_ERROR,\n  TOKEN_IS_REQUIRED_ERROR: TOKEN_IS_REQUIRED_ERROR,\n  API_TIMEOUT_ERROR: API_TIMEOUT_ERROR\n};","map":{"version":3,"names":["require","MONDAY_API_URL","MONDAY_OAUTH_TOKEN_URL","fetch","COULD_NOT_PARSE_JSON_RESPONSE_ERROR","TOKEN_IS_REQUIRED_ERROR","API_TIMEOUT_ERROR","apiRequest","url","data","token","options","nodeFetch","method","body","JSON","stringify","headers","Authorization","execute","Error","path","fullUrl","response","responseStatusCode","status","responseContentType","get","includes","text","responseText","json","module","exports"],"sources":["C:/laragon/www/monday/quickstart-react/node_modules/monday-sdk-js/src/monday-api-client/monday-api-client.js"],"sourcesContent":["const { MONDAY_API_URL, MONDAY_OAUTH_TOKEN_URL } = require(\"./../constants.js\");\nconst fetch = require(\"./fetch\");\n\nconst COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nconst TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\nconst API_TIMEOUT_ERROR = \"Received timeout from monday.com's GraphQL API\";\n\nfunction apiRequest(url, data, token, options = {}) {\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nasync function execute(data, token, options = {}) {\n  if (!token && options.url !== MONDAY_OAUTH_TOKEN_URL) throw new Error(TOKEN_IS_REQUIRED_ERROR);\n\n  const url = options.url || MONDAY_API_URL;\n  const path = options.path || \"\";\n  const fullUrl = `${url}${path}`;\n  let response = await apiRequest(fullUrl, data, token, options);\n\n  const responseStatusCode = response.status;\n  const responseContentType = response.headers.get(\"content-type\");\n  if (!responseContentType || !responseContentType.includes(\"application/json\")) {\n    if (responseStatusCode === 504) {\n      throw new Error(API_TIMEOUT_ERROR);\n    }\n\n    const responseText = await response.text();\n    throw new Error(responseText);\n  }\n\n  try {\n    return await response.json();\n  } catch (err) {\n    throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n  }\n}\n\nmodule.exports = { execute, COULD_NOT_PARSE_JSON_RESPONSE_ERROR, TOKEN_IS_REQUIRED_ERROR, API_TIMEOUT_ERROR };\n"],"mappings":";;;;AAAA,eAAmDA,OAAO,CAAC,mBAAD,CAA1D;AAAA,IAAQC,cAAR,YAAQA,cAAR;AAAA,IAAwBC,sBAAxB,YAAwBA,sBAAxB;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAMI,mCAAmC,GAAG,6DAA5C;AACA,IAAMC,uBAAuB,GAAG,mBAAhC;AACA,IAAMC,iBAAiB,GAAG,gDAA1B;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAoD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAClD,OAAOR,KAAK,CAACS,SAAN,CAAgBJ,GAAhB,EAAqB;IAC1BK,MAAM,EAAEF,OAAO,CAACE,MAAR,IAAkB,MADA;IAE1BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAI,IAAI,EAAvB,CAFoB;IAG1BQ,OAAO,EAAE;MACPC,aAAa,EAAER,KADR;MAEP,gBAAgB;IAFT;EAHiB,CAArB,CAAP;AAQD;;SAEcS,O;;;;;wEAAf,iBAAuBV,IAAvB,EAA6BC,KAA7B;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAoCC,OAApC,2DAA8C,EAA9C;;YAAA,MACM,CAACD,KAAD,IAAUC,OAAO,CAACH,GAAR,KAAgBN,sBADhC;cAAA;cAAA;YAAA;;YAAA,MAC8D,IAAIkB,KAAJ,CAAUf,uBAAV,CAD9D;;UAAA;YAGQG,GAHR,GAGcG,OAAO,CAACH,GAAR,IAAeP,cAH7B;YAIQoB,IAJR,GAIeV,OAAO,CAACU,IAAR,IAAgB,EAJ/B;YAKQC,OALR,aAKqBd,GALrB,SAK2Ba,IAL3B;YAAA;YAAA,OAMuBd,UAAU,CAACe,OAAD,EAAUb,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,CANjC;;UAAA;YAMMY,QANN;YAQQC,kBARR,GAQ6BD,QAAQ,CAACE,MARtC;YASQC,mBATR,GAS8BH,QAAQ,CAACN,OAAT,CAAiBU,GAAjB,CAAqB,cAArB,CAT9B;;YAAA,MAUM,CAACD,mBAAD,IAAwB,CAACA,mBAAmB,CAACE,QAApB,CAA6B,kBAA7B,CAV/B;cAAA;cAAA;YAAA;;YAAA,MAWQJ,kBAAkB,KAAK,GAX/B;cAAA;cAAA;YAAA;;YAAA,MAYY,IAAIJ,KAAJ,CAAUd,iBAAV,CAZZ;;UAAA;YAAA;YAAA,OAe+BiB,QAAQ,CAACM,IAAT,EAf/B;;UAAA;YAeUC,YAfV;YAAA,MAgBU,IAAIV,KAAJ,CAAUU,YAAV,CAhBV;;UAAA;YAAA;YAAA;YAAA,OAoBiBP,QAAQ,CAACQ,IAAT,EApBjB;;UAAA;YAAA;;UAAA;YAAA;YAAA;YAAA,MAsBU,IAAIX,KAAJ,CAAUhB,mCAAV,CAtBV;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA0BA4B,MAAM,CAACC,OAAP,GAAiB;EAAEd,OAAO,EAAPA,OAAF;EAAWf,mCAAmC,EAAnCA,mCAAX;EAAgDC,uBAAuB,EAAvBA,uBAAhD;EAAyEC,iBAAiB,EAAjBA;AAAzE,CAAjB"},"metadata":{},"sourceType":"script"}